@{
    @using SmartAdmin.WebUI.Models.Timesheet;
    @model TimesheetReportingModel;


    @using Services;

}
@section HeadBlock {
    <link rel="stylesheet" media="screen, print" href="~/css/fa-brands.css">
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-datepicker/bootstrap-datepicker.css">
}



<h2>Timesheet reporting</h2>
<div id="panel-1" class="panel">
    <div class="panel-hdr">

        <h2>&nbsp;</h2>

        <div class="panel-toolbar">
            <button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
            <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
            @*<button class="btn btn-panel" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"></button>*@
        </div>
    </div>
    <div class="panel-container show">
        <div class="panel-content">
            <div class="form-group">
                <table class="table table-borderless">
                    <tr>
                        <td>
                            <label class="form-label md-header" for="date-range-div">Date range:</label>
                            <div style="padding:0px;border-spacing:0px;" class="col-12 col-lg-6">
                                <div class="input-daterange input-group" id="date-range-div">
                                    <input type="text" name="start" id="start-date" class="form-control"  required onchange="validateDate(this)" onclick="validateDate(this)" onload="validateDate(this)">
                                    <div class="input-group-append input-group-prepend">
                                        <span class="input-group-text fs-xl"><i class="@(Settings.Theme.IconPrefix) fa-ellipsis-h"></i></span>
                                    </div>
                                    <input type="text" class="form-control" name="end" id="end-date" required onchange="validateDate(this)" onclick="validateDate(this)" onload="validateDate(this)">
                                </div>
                            </div>
                        </td>
                    </tr>
                    @if (Model.AllDepartments != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">Department:</label>
                                <select class="select2-placeholder-multiple form-control" multiple="multiple" id="dept-select" onchange="updateTeamsAndEmployeeList();">
                                    @*<option value="-1">(None selected)</option>*@

                                    @for (var i = 0; i < Model.AllDepartments.Count(); i++)
                                    {
                                        <option value="@Model.AllDepartments.ElementAt(i).Id">@Model.AllDepartments.ElementAt(i).Name</option>
                                    }


                                </select>
                            </td>
                        </tr>
                    }
                    @if (Model.AllTeams != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">Team:</label>
                                <select class="select2-placeholder-multiple form-control" multiple="multiple" id="team-select" onchange="updateEmployeeList();">
                                    @*<option value="-1">(None selected)</option>*@

                                    @for (var i = 0; i < Model.AllTeams.Count(); i++)
                                    {
                                        <option value="@Model.AllTeams.ElementAt(i).Id">@Model.AllTeams.ElementAt(i).Name</option>
                                    }


                                </select>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <label class="form-label md-header">Employee:</label>
                            <select class="select2-placeholder-multiple form-control" multiple="multiple" id="employee-select">
                                @*<option value="-1">(None selected)</option>*@
                                @for (var i = 0; i < Model.AllEmployees.Count(); i++)
                                {
                                    <option value="@Model.AllEmployees.ElementAt(i).Id">@Model.AllEmployees.ElementAt(i).FirstName @Model.AllEmployees.ElementAt(i).Surname</option>
                                }
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label class="form-label md-header">Org group:</label>
                            <span id="org-group-span">
                                <select class="select2-placeholder-multiple form-control" multiple="multiple" id="org-group-select" onchange="updateOrgList();">
                                    @*<option value="-1">(Click to select org group)</option>*@
                                    @if (Model.AllOrgGroupsIdAndName != null)
                                    {
                                        @for (var i = 0; i < Model.AllOrgGroupsIdAndName.Count(); i++)
                                        {
                                            var currentKey = Model.AllOrgGroupsIdAndName.ElementAt(i).Key;
                                            <option value="@currentKey">@currentKey - @Model.AllOrgGroupsIdAndName.ElementAt(i).Value</option>
                                        }
                                    }

                                </select>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label class="form-label md-header">Org:</label>
                            <span id="org-span">
                                <select class="select2-placeholder-multiple form-control" multiple="multiple" id="org-select">
                                    @*<option value="-1">(Click to select org group)</option>*@
                                    @if (Model.AllOrgsIdAndName != null)
                                    {
                                        @for (var i = 0; i < Model.AllOrgsIdAndName.Count(); i++)
                                        {
                                            var currentKey = Model.AllOrgsIdAndName.ElementAt(i).Key;
                                            <option value="@currentKey">@currentKey - @Model.AllOrgsIdAndName.ElementAt(i).Value</option>
                                        }
                                    }

                                </select>
                            </span>
                        </td>
                    </tr>
                    @if (Model.AllEndClients != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">End clients:</label>
                                <span id="org-span">
                                    <select class="select2-placeholder-multiple form-control" multiple="multiple" id="end-client-select" onchange="updateEndClientDetails();">
                                        @for (var i = 0; i < Model.AllEndClients.Count(); i++)
                                        {
                                            <option value="@Model.AllEndClients.ElementAt(i).Id">@Model.AllEndClients.ElementAt(i).Name</option>
                                        }
                                    </select>
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.AllBrands != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">Brands:</label>
                                <span id="org-span">
                                    <select class="select2-placeholder-multiple form-control" multiple="multiple" id="brand-select">
                                        @for (var i = 0; i < Model.AllBrands.Count(); i++)
                                        {
                                            <option value="@Model.AllBrands.ElementAt(i).Id">@Model.AllBrands.ElementAt(i).DataObjectName</option>
                                        }
                                    </select>
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.AllCategories != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">Categories:</label>
                                <span id="org-span">
                                    <select class="select2-placeholder-multiple form-control" multiple="multiple" id="category-select">
                                        @for (var i = 0; i < Model.AllCategories.Count(); i++)
                                        {
                                            <option value="@Model.AllCategories.ElementAt(i).Id">@Model.AllCategories.ElementAt(i).DataObjectName</option>
                                        }
                                    </select>
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.AllCampaigns != null)
                    {
                        <tr>
                            <td>
                                <label class="form-label md-header">Campaigns:</label>
                                <span id="org-span">
                                    <select class="select2-placeholder-multiple form-control" multiple="multiple" id="campaign-select">
                                        @for (var i = 0; i < Model.AllCampaigns.Count(); i++)
                                        {
                                            <option value="@Model.AllCampaigns.ElementAt(i).Id">@Model.AllCampaigns.ElementAt(i).DataObjectName</option>
                                        }
                                    </select>
                                </span>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <label class="form-label md-header" for="activity-type-select">Activity type:</label>
                            <select class="select2-placeholder-multiple form-control" multiple="multiple" id="activity-type-select" onchange="updateActivitiesList();">
                                <option value="1">Chargeable tasks</option>
                                <option value="2">Non chargeable tasks</option>
                                <option value="3">Other tasks</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label class="form-label md-header" for="activity-select">Activity name:</label>
                            <select class="select2-placeholder-multiple form-control" multiple="multiple" id="activity-select">
                                <optgroup label="Chargeable tasks">
                                    @for (int i = 0; i < Model.AllClientChargeableActivities.Count(); i++)
                                    {
                                        <option value="@Model.AllClientChargeableActivities.ElementAt(i).Id">@Model.AllClientChargeableActivities.ElementAt(i).CategoryName</option>
                                    }
                                </optgroup>
                                <optgroup label="Non chargeable tasks">
                                    @for (int i = 0; i < Model.AllClientNonChargeableActivities.Count(); i++)
                                    {
                                        <option value="@Model.AllClientNonChargeableActivities.ElementAt(i).Id">@Model.AllClientNonChargeableActivities.ElementAt(i).CategoryName</option>
                                    }
                                </optgroup>
                                <optgroup label="Other">
                                    @for (int i = 0; i < Model.AllNonClientActivities.Count(); i++)
                                    {
                                        <option value="@Model.AllNonClientActivities.ElementAt(i).Id">@Model.AllNonClientActivities.ElementAt(i).CategoryName</option>
                                    }
                                </optgroup>
                            </select>
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <label class="form-label md-header">Approval status:</label>
                            <select class="select2-placeholder-multiple form-control" id="approval-select">
                                <option value="1">Approved</option>
                                <option value="2">Not approved</option>
                                <option value="3" selected="selected">All</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="alert border-faded bg-transparent text-secondary fade show" role="alert" id="alert-div" hidden="hidden">
                                <div class="d-flex align-items-center">
                                    <div class="flex-1">
                                        <span class="h5 color-success-600">Request submitted!</span>
                                        <br>
                                        Your report is being processed and will be emailed to you once ready.
                                    </div>
                                </div>
                            </div>
                            <div class="alert alert-warning" role="alert" hidden="hidden" id="field-validation-message">
                                Please select a start and end date
                            </div>
                            <a class="btn btn-success" id="export-button" asp-action="ExportTimesheetReport" onclick="emailExports();event.preventDefault();">Email me the report</a>
                        </td>
                    </tr>

                </table>

            </div>
        </div>
    </div>

</div>

@section ScriptsBlock {
    <script src="~/js/formplugins/select2/select2.bundle.js"></script>
    <script src="~/js/formplugins/bootstrap-datepicker/bootstrap-datepicker.js"></script>
    <script>

        function validateDate(dateControl) {
            var dateSelected = Date.parse(dateControl.value);
            var exportButton = document.getElementById('export-button');
            //debugger;
            if (dateControl.value == '') {
                dateControl.setAttribute("class", "form-control is-invalid");
                return false;
            }
            else {
                dateControl.setAttribute("class", "form-control is-valid");
                return true;
            }
           
        }
            function updateTeamsAndEmployeeList() {

                var deptSelect = document.getElementById('dept-select');
                var teamSelect = document.getElementById('team-select');
                var employeeSelect = document.getElementById('employee-select');
                var allSelectedOptions = '';
                for (var i = 0; i < deptSelect.options.length; i++) {
                    if (deptSelect.options[i].selected == true) {
                        allSelectedOptions += deptSelect.options[i].value + ',';
                    }
                }
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = xhr.responseText;
                        var allTeams = $.parseJSON(response);
                        teamSelect.innerHTML = '';
                        for (var i = 0; i < allTeams.length; i++) {
                            var teamOption = document.createElement("option");
                            teamOption.setAttribute("value", allTeams[i].id);
                            teamOption.innerText = allTeams[i].name;
                            teamSelect.appendChild(teamOption);
                        }
                    }
                }
                xhr.open("POST", "Timesheet/GetAllTeamsForDepartments", true);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhr.send(allSelectedOptions);

                var xhr1 = new XMLHttpRequest();
                xhr1.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = xhr1.responseText;
                        var allEmployees = $.parseJSON(response);
                        employeeSelect.innerHTML = '';
                        for (var i = 0; i < allEmployees.length; i++) {
                            var employeeOption = document.createElement("option");
                            employeeOption.setAttribute("value", allEmployees[i].id);
                            employeeOption.innerText = allEmployees[i].firstName + ' ' + allEmployees[i].surname;
                            employeeSelect.appendChild(employeeOption);
                        }
                    }
                }
                xhr1.open("POST", "Timesheet/GetAllEmployeesForDepartments", true);
                xhr1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhr1.send(allSelectedOptions);

        }

        function updateEmployeeList() {
            var teamSelect = document.getElementById('team-select');
            var employeeSelect = document.getElementById('employee-select');

            var allSelectedOptions = '';
            for (var i = 0; i < teamSelect.options.length; i++) {
                if (teamSelect.options[i].selected == true) {
                    allSelectedOptions += teamSelect.options[i].value + ',';
                }
            }

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr.responseText;
                    var allEmployees = $.parseJSON(response);
                    employeeSelect.innerHTML = '';
                    for (var i = 0; i < allEmployees.length; i++) {
                        var employeeOption = document.createElement("option");
                        employeeOption.setAttribute("value", allEmployees[i].id);
                        employeeOption.innerText = allEmployees[i].firstName + ' ' + allEmployees[i].surname;
                        employeeSelect.appendChild(employeeOption);
                    }
                }
            }
            xhr.open("POST", "Timesheet/GetAllEmployeesForTeams", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(allSelectedOptions);

        }

        function updateOrgList() {
            var groupSelect = document.getElementById('org-group-select');
            var orgSelect = document.getElementById('org-select');
            var allSelectedOptions = '';
            for (var i = 0; i < groupSelect.options.length; i++) {
                if (groupSelect.options[i].selected == true) {
                    allSelectedOptions += groupSelect.options[i].value + ',';
                }
            }

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr.responseText;
                    var allOrgs = $.parseJSON(response);
                    orgSelect.innerHTML = '';
                    for (var i = 0; i < allOrgs.length; i++) {
                        var orgOption = document.createElement("option");
                        var orgId = allOrgs[i].split(" - ")[0];
                        orgOption.setAttribute("value", orgId);
                        orgOption.innerText = allOrgs[i];
                        orgSelect.appendChild(orgOption);
                    }
                }
            }
            xhr.open("POST", "Timesheet/GetAllOrgsForOrgGroups", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(allSelectedOptions);

        }

        function updateActivitiesList() {
            var activityTypeSelect = document.getElementById('activity-type-select');
            var activityselect = document.getElementById('activity-select');

            var allSelectedOptions = '';
            for (var i = 0; i < activityTypeSelect.options.length; i++) {
                if (activityTypeSelect.options[i].selected == true) {
                    allSelectedOptions += activityTypeSelect.options[i].value + ',';
                }
            }

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr.responseText;

                    var allActivities = $.parseJSON(response);

                    activityselect.innerHTML = '';
                    for (var i = 0; i < allActivities.length; i++) {
                        var activityOptionGroup = document.createElement("optgroup");
                        if (allActivities[i][0].categoryTypeId == 1) {
                            activityOptionGroup.setAttribute("label", "Chargeable tasks");
                        }
                        else if (allActivities[i][0].categoryTypeId == 2) {
                            activityOptionGroup.setAttribute("label", "Non chargeable tasks");
                        }
                        else if (allActivities[i][0].categoryTypeId == 3) {
                            activityOptionGroup.setAttribute("label", "Other tasks");
                        }

                        for (var j = 0; j < allActivities[i].length; j++) {
                            var activityOption = document.createElement("option");
                            activityOption.setAttribute("value", allActivities[i][j].id);
                            activityOption.innerText = allActivities[i][j].categoryName;
                            activityOptionGroup.appendChild(activityOption);
                        }
                        activityselect.appendChild(activityOptionGroup);

                     }

                }
            }
            xhr.open("POST", "Timesheet/GetAllActivitiesForGivenTypes", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(allSelectedOptions);

        }

        function updateEndClientDetails() {

            var endClientSelect = document.getElementById('end-client-select');
            var brandSelect = document.getElementById('brand-select');
            var categorySelect = document.getElementById('category-select');
            var campaignSelect = document.getElementById('campaign-select');

            var allSelectedOptions = '';
            for (var i = 0; i < endClientSelect.options.length; i++) {
                if (endClientSelect.options[i].selected == true) {
                    allSelectedOptions += endClientSelect.options[i].value + ',';
                }
            }

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr.responseText;
                    var allBrands = $.parseJSON(response);
                    brandSelect.innerHTML = '';
                    for (var i = 0; i < allBrands.length; i++) {
                        var brandOption = document.createElement("option");
                        brandOption.setAttribute("value", allBrands[i].id);
                        brandOption.innerText = allBrands[i].dataObjectName;
                        brandSelect.appendChild(brandOption);
                    }
                }
            }
            xhr.open("POST", "Timesheet/GetAllBrandsForEndClients", true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.send(allSelectedOptions);

            var xhr1 = new XMLHttpRequest();
            xhr1.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr1.responseText;
                    var allCategories = $.parseJSON(response);
                    categorySelect.innerHTML = '';
                    for (var i = 0; i < allCategories.length; i++) {
                        var categoryOption = document.createElement("option");
                        categoryOption.setAttribute("value", allCategories[i].id);
                        categoryOption.innerText = allCategories[i].dataObjectName;
                        categorySelect.appendChild(categoryOption);
                    }
                }
            }
            xhr1.open("POST", "Timesheet/GetAllCategoriesForEndClients", true);
            xhr1.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr1.send(allSelectedOptions);

            var xhr2 = new XMLHttpRequest();
            xhr2.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var response = xhr2.responseText;
                    var allCampaigns = $.parseJSON(response);
                    campaignSelect.innerHTML = '';
                    for (var i = 0; i < allCampaigns.length; i++) {
                        var campaignOption = document.createElement("option");
                        campaignOption.setAttribute("value", allCampaigns[i].id);
                        campaignOption.innerText = allCampaigns[i].dataObjectName;
                        campaignSelect.appendChild(campaignOption);
                    }
                }
            }
            xhr2.open("POST", "Timesheet/GetAllCampaignsForEndClients", true);
            xhr2.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr2.send(allSelectedOptions);
        }

        function emailExports() {

            var startDateInput = document.getElementById('start-date');
            var endDateInput = document.getElementById('end-date');
            
            if (validateDate(startDateInput) == false || validateDate(startDateInput) == false) {
                document.getElementById('field-validation-message').hidden = false;
            }
            else {
                document.getElementById('field-validation-message').hidden = true;
                var deptSelect = document.getElementById('dept-select');
                var allDeptOptions = '';
                if (deptSelect != null) {
                    for (var i = 0; i < deptSelect.options.length; i++) {
                        if (deptSelect.options[i].selected == true) {
                            allDeptOptions += deptSelect.options[i].value + ',';
                        }
                    }
                }
                
                var teamSelect = document.getElementById('team-select');
                var allTeamsOptions = '';
                if (teamSelect != null) {
                    for (var i = 0; i < teamSelect.options.length; i++) {
                        if (teamSelect.options[i].selected == true) {
                            allTeamsOptions += teamSelect.options[i].value + ',';
                        }
                    }
                }

                var employeeSelect = document.getElementById('employee-select');
                var allEmployeesOptions = '';
                if (employeeSelect != null) {
                    for (var i = 0; i < employeeSelect.options.length; i++) {
                        if (employeeSelect.options[i].selected == true) {
                            allEmployeesOptions += employeeSelect.options[i].value + ',';
                        }
                    }
                }
                
                var groupSelect = document.getElementById('org-group-select');
                var allGroupsOptions = '';
                if (groupSelect != null) {
                    for (var i = 0; i < groupSelect.options.length; i++) {
                        if (groupSelect.options[i].selected == true) {
                            allGroupsOptions += groupSelect.options[i].value + ',';
                        }
                    }
                }
               

                var orgSelect = document.getElementById('org-select');
                var allOrgsOptions = '';
                if (orgSelect != null) {
                    for (var i = 0; i < orgSelect.options.length; i++) {
                        if (orgSelect.options[i].selected == true) {
                            allOrgsOptions += orgSelect.options[i].value + ',';
                        }
                    }
                }
                

                var endClientSelect = document.getElementById('end-client-select');
                var allEndClientsOptions = '';
                if (endClientSelect != null) {
                    for (var i = 0; i < endClientSelect.options.length; i++) {
                        if (endClientSelect.options[i].selected == true) {
                            allEndClientsOptions += endClientSelect.options[i].value + ',';
                        }
                    }
                }
                

                var brandSelect = document.getElementById('brand-select');
                var allBrandsOptions = '';
                if (brandSelect != null) {
                    for (var i = 0; i < brandSelect.options.length; i++) {
                        if (brandSelect.options[i].selected == true) {
                            allBrandsOptions += brandSelect.options[i].value + ',';
                        }
                    }
                }

                var categorySelect = document.getElementById('category-select');
                var allCategoriesOptions = '';
                if (categorySelect != null) {
                    for (var i = 0; i < categorySelect.options.length; i++) {
                        if (categorySelect.options[i].selected == true) {
                            allCategoriesOptions += categorySelect.options[i].value + ',';
                        }
                    }
                }
                

                var campaignSelect = document.getElementById('campaign-select');
                var allCampaignsOptions = '';
                if (campaignSelect != null) {
                    for (var i = 0; i < campaignSelect.options.length; i++) {
                        if (campaignSelect.options[i].selected == true) {
                            allCampaignsOptions += campaignSelect.options[i].value + ',';
                        }
                    }
                }

                var activityTypeSelect = document.getElementById('activity-type-select');
                var allTypesOptions = '';
                if (activityTypeSelect != null) {
                    for (var i = 0; i < activityTypeSelect.options.length; i++) {
                        if (activityTypeSelect.options[i].selected == true) {
                            allTypesOptions += activityTypeSelect.options[i].value + ',';
                        }
                    }
                }
               

                var activityNameSelect = document.getElementById('activity-select');
                var allActivityNameOptions = '';
                if (activityNameSelect != null) {
                    for (var i = 0; i < activityNameSelect.options.length; i++) {
                        if (activityNameSelect.options[i].selected == true) {
                            allActivityNameOptions += activityNameSelect.options[i].value + ',';
                        }
                    }
                }
                

                var approvalSelect = document.getElementById('approval-select');

                const exportDetails = {
                    startDate: startDateInput.value.toString("dd-MM-yyyy"), endDate: endDateInput.value.toString("dd-MM-yyyy"), departmentString: allDeptOptions, teamString: allTeamsOptions,
                    employeeString: allEmployeesOptions, orgGroupString: allGroupsOptions, orgString: allOrgsOptions, endClientString: allEndClientsOptions,
                    brandString: allBrandsOptions, categoryString: allCategoriesOptions, campaignString: allCampaignsOptions, activityTypeString: allTypesOptions,
                    activityNameString: allActivityNameOptions, approvalStatusString: approvalSelect.value
                };

                var arraytoReturn = new Array();
                arraytoReturn.push(exportDetails);

                var exportDetailsString = JSON.stringify(arraytoReturn);

                var xhr = new XMLHttpRequest();
                xhr.open("POST", "Timesheet/ExportTimesheetReport", false);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhr.send(exportDetailsString);

                //show message on screen
                document.getElementById('alert-div').hidden = false;
                document.getElementById('export-button').style.display = "none";
            }
            

        }

		// Class definition
		var controls = {
			leftArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-left" style="font-size: 1.25rem"></i>',
			rightArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-right" style="font-size: 1.25rem"></i>'
		}
		var runDatePicker = function () {
            // range picker
            $('#date-range-div').datepicker({
                todayHighlight: true,
                orientation: "bottom right",
				templates: controls,
				format: "dd/mm/yyyy",
               });

            var today = new Date();
            var endDateString = today.getDate().toString() + '/' + (today.getMonth() + 1).toString() + '/' + today.getFullYear().toString();
            var lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            var startDateString = lastWeek.getDate().toString() + '/' + (lastWeek.getMonth() + 1).toString() + '/' + lastWeek.getFullYear().toString();;
            $('#start-date').datepicker("update", lastWeek);
            $('#end-date').datepicker("update", today);


		}
		$(document).ready(function () {
            $(function () {
                $('.select2').select2();
                $(".select2-placeholder-multiple").select2({
                    placeholder: "Search..."
                });


				$(".js-hide-search").select2({
					minimumResultsForSearch: 1 / 0
				});
				$(".js-max-length").select2({
					maximumSelectionLength: 2,
					placeholder: "Select maximum 2 items"
				});
				$(".select2-placeholder").select2({
					placeholder:"Select a state",
					allowClear: true
				});
				$(".js-select2-icons").select2({
					minimumResultsForSearch: 1 / 0,
					templateResult: icon,
					templateSelection: icon,
					escapeMarkup: function (elm) {
						return elm
					}
				});
				function icon(elm) {
					elm.element;
					return elm.id ? "<i class='" + $(elm.element).data("icon") + " mr-2'></i>" + elm.text : elm.text
				}
				$(".js-data-example-ajax").select2({
				  ajax: {
				    url: "https://api.github.com/search/repositories",
				    dataType: 'json',
				    delay: 250,
				    data: function (params) {
				      return {
				        q: params.term, // search term
				        page: params.page
				      };
				    },
				    processResults: function (data, params) {
				      // parse the results into the format expected by Select2
				      // since we are using custom formatting functions we do not need to
				      // alter the remote JSON data, except to indicate that infinite
				      // scrolling can be used
				      params.page = params.page || 1;
				      return {
				        results: data.items,
				        pagination: {
				          more: (params.page * 30) < data.total_count
				        }
				      };
				    },
				    cache: true
				  },
				  placeholder: 'Search for a repository',
				  escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
				  minimumInputLength: 1,
				  templateResult: formatRepo,
				  templateSelection: formatRepoSelection
				});
				function formatRepo (repo) {
				  if (repo.loading) {
				    return repo.text;
				  }
				  var markup = "<div class='select2-result-repository clearfix d-flex'>" +
				    "<div class='select2-result-repository__avatar mr-2'><img src='" + repo.owner.avatar_url + "' class='width-2 height-2 mt-1 rounded' /></div>" +
				    "<div class='select2-result-repository__meta'>" +
				      "<div class='select2-result-repository__title fs-lg fw-500'>" + repo.full_name + "</div>";
				  if (repo.description) {
				    markup += "<div class='select2-result-repository__description fs-xs opacity-80 mb-1'>" + repo.description + "</div>";
				  }
				  markup += "<div class='select2-result-repository__statistics d-flex fs-sm'>" +
				    "<div class='select2-result-repository__forks mr-2'><i class='@(Settings.Theme.IconPrefix) fa-lightbulb'></i> " + repo.forks_count + " Forks</div>" +
				    "<div class='select2-result-repository__stargazers mr-2'><i class='@(Settings.Theme.IconPrefix) fa-star'></i> " + repo.stargazers_count + " Stars</div>" +
				    "<div class='select2-result-repository__watchers mr-2'><i class='@(Settings.Theme.IconPrefix) fa-eye'></i> " + repo.watchers_count + " Watchers</div>" +
				  "</div>" +
				  "</div></div>";
				  return markup;
				}
				function formatRepoSelection (repo) {
				  return repo.full_name || repo.text;
                }

			});
            runDatePicker();

        });

    </script>
}
